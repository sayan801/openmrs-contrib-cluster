(base) technicise-laptop-2@technicise-laptop-2-Vostro-3500:~/code/openmrs-contrib-cluster/terraform$ terraform apply -var-file=nonprod.tfvars
Acquiring state lock. This may take a few moments...

Terraform used the selected providers to generate the following execution plan.
Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # module.eks.data.aws_eks_addon_version.openmrs-ebs-addon-version will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_eks_addon_version" "openmrs-ebs-addon-version" {
      + addon_name         = "aws-ebs-csi-driver"
      + id                 = (known after apply)
      + kubernetes_version = "1.31"
      + most_recent        = true
      + version            = (known after apply)
    }

  # module.eks.data.aws_iam_policy_document.ebs_csi_driver_assume_role will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "ebs_csi_driver_assume_role" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions = [
              + "sts:AssumeRoleWithWebIdentity",
            ]
          + effect  = "Allow"

          + condition {
              + test     = "StringEquals"
              + values   = [
                  + "sts.amazonaws.com",
                ]
              + variable = (known after apply)
            }
          + condition {
              + test     = "StringEquals"
              + values   = [
                  + "system:serviceaccount:kube-system:ebs-csi-controller-sa",
                ]
              + variable = (known after apply)
            }

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "Federated"
            }
        }
    }

  # module.eks.data.aws_subnets.private_subnets will be read during apply
  # (config refers to values not yet known)
 <= data "aws_subnets" "private_subnets" {
      + id   = (known after apply)
      + ids  = (known after apply)
      + tags = (known after apply)

      + filter {
          + name   = "tag:Subnet-Type"
          + values = [
              + "private-nonprod",
            ]
        }
      + filter {
          + name   = "vpc-id"
          + values = [
              + (known after apply),
            ]
        }
    }

  # module.eks.data.aws_subnets.public_subnets will be read during apply
  # (config refers to values not yet known)
 <= data "aws_subnets" "public_subnets" {
      + id   = (known after apply)
      + ids  = (known after apply)
      + tags = (known after apply)

      + filter {
          + name   = "tag:Subnet-Type"
          + values = [
              + "public-nonprod",
            ]
        }
      + filter {
          + name   = "vpc-id"
          + values = [
              + (known after apply),
            ]
        }
    }

  # module.eks.data.aws_vpc.openmrs-vpc will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_vpc" "openmrs-vpc" {
      + arn                                  = (known after apply)
      + cidr_block                           = (known after apply)
      + cidr_block_associations              = (known after apply)
      + default                              = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = (known after apply)
      + enable_dns_support                   = (known after apply)
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = (known after apply)
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + state                                = (known after apply)
      + tags                                 = (known after apply)

      + filter {
          + name   = "tag:Name"
          + values = [
              + "openmrs-vpc-nonprod",
            ]
        }
    }

  # module.eks.data.tls_certificate.oidc will be read during apply
  # (config refers to values not yet known)
 <= data "tls_certificate" "oidc" {
      + certificates = (known after apply)
      + id           = (known after apply)
      + url          = (known after apply)
    }

  # module.eks.aws_eks_addon.openmrs-ebs-addon will be created
  + resource "aws_eks_addon" "openmrs-ebs-addon" {
      + addon_name                  = "aws-ebs-csi-driver"
      + addon_version               = (known after apply)
      + arn                         = (known after apply)
      + cluster_name                = "openmrs-cluster-nonprod"
      + configuration_values        = (known after apply)
      + created_at                  = (known after apply)
      + id                          = (known after apply)
      + modified_at                 = (known after apply)
      + preserve                    = true
      + resolve_conflicts_on_create = "OVERWRITE"
      + resolve_conflicts_on_update = "OVERWRITE"
      + service_account_role_arn    = (known after apply)
      + tags_all                    = (known after apply)
    }

  # module.eks.aws_eks_cluster.openmrs-cluster will be created
  + resource "aws_eks_cluster" "openmrs-cluster" {
      + arn                       = (known after apply)
      + certificate_authority     = (known after apply)
      + cluster_id                = (known after apply)
      + created_at                = (known after apply)
      + enabled_cluster_log_types = [
          + "api",
          + "audit",
          + "authenticator",
          + "controllerManager",
          + "scheduler",
        ]
      + endpoint                  = (known after apply)
      + id                        = (known after apply)
      + identity                  = (known after apply)
      + name                      = "openmrs-cluster-nonprod"
      + platform_version          = (known after apply)
      + role_arn                  = (known after apply)
      + status                    = (known after apply)
      + tags                      = {
          + "owner" = "openmrs-infra"
        }
      + tags_all                  = {
          + "owner" = "openmrs-infra"
        }
      + version                   = "1.31"

      + kubernetes_network_config (known after apply)

      + vpc_config {
          + cluster_security_group_id = (known after apply)
          + endpoint_private_access   = true
          + endpoint_public_access    = true
          + public_access_cidrs       = (known after apply)
          + security_group_ids        = (known after apply)
          + subnet_ids                = (known after apply)
          + vpc_id                    = (known after apply)
        }
    }

  # module.eks.aws_eks_node_group.openmrs-node_group will be created
  + resource "aws_eks_node_group" "openmrs-node_group" {
      + ami_type               = (known after apply)
      + arn                    = (known after apply)
      + capacity_type          = "ON_DEMAND"
      + cluster_name           = "openmrs-cluster-nonprod"
      + disk_size              = (known after apply)
      + id                     = (known after apply)
      + instance_types         = [
          + "t3.medium",
        ]
      + node_group_name        = "openmrs-node-group-nonprod"
      + node_group_name_prefix = (known after apply)
      + node_role_arn          = (known after apply)
      + release_version        = (known after apply)
      + resources              = (known after apply)
      + status                 = (known after apply)
      + subnet_ids             = (known after apply)
      + tags_all               = (known after apply)
      + version                = "1.31"

      + scaling_config {
          + desired_size = 3
          + max_size     = 6
          + min_size     = 3
        }

      + update_config (known after apply)
    }

  # module.eks.aws_iam_openid_connect_provider.eks will be created
  + resource "aws_iam_openid_connect_provider" "eks" {
      + arn             = (known after apply)
      + client_id_list  = [
          + "sts.amazonaws.com",
        ]
      + id              = (known after apply)
      + tags_all        = (known after apply)
      + thumbprint_list = (known after apply)
      + url             = (known after apply)
    }

  # module.eks.aws_iam_role.cluster-role will be created
  + resource "aws_iam_role" "cluster-role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = [
                              + "eks.amazonaws.com",
                            ]
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "OpenMRSEKSClusterRole-nonprod"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + role_last_used        = (known after apply)
      + tags                  = {
          + "Name"  = "OpenMRSEKSClusterRole-nonprod"
          + "owner" = "openmrs-infra"
        }
      + tags_all              = {
          + "Name"  = "OpenMRSEKSClusterRole-nonprod"
          + "owner" = "openmrs-infra"
        }
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.eks.aws_iam_role.ebs_csi_driver will be created
  + resource "aws_iam_role" "ebs_csi_driver" {
      + arn                   = (known after apply)
      + assume_role_policy    = (known after apply)
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "ebs-csi-driver"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + role_last_used        = (known after apply)
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.eks.aws_iam_role.node-role will be created
  + resource "aws_iam_role" "node-role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "OpenMRSEKSNodeRole-nonprod"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + role_last_used        = (known after apply)
      + tags                  = {
          + "Name"  = "OpenMRSEKSNodeRole-nonprod"
          + "owner" = "openmrs-infra"
        }
      + tags_all              = {
          + "Name"  = "OpenMRSEKSNodeRole-nonprod"
          + "owner" = "openmrs-infra"
        }
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.eks.aws_iam_role_policy_attachment.cluster_AmazonEBSCSIDriverPolicy will be created
  + resource "aws_iam_role_policy_attachment" "cluster_AmazonEBSCSIDriverPolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy"
      + role       = "ebs-csi-driver"
    }

  # module.eks.aws_iam_role_policy_attachment.cluster_EKSClusterPolicy will be created
  + resource "aws_iam_role_policy_attachment" "cluster_EKSClusterPolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      + role       = "OpenMRSEKSClusterRole-nonprod"
    }

  # module.eks.aws_iam_role_policy_attachment.cluster_EKSServicePolicy will be created
  + resource "aws_iam_role_policy_attachment" "cluster_EKSServicePolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"
      + role       = "OpenMRSEKSClusterRole-nonprod"
    }

  # module.eks.aws_iam_role_policy_attachment.node_AmazonEC2ContainerRegistryReadOnly will be created
  + resource "aws_iam_role_policy_attachment" "node_AmazonEC2ContainerRegistryReadOnly" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      + role       = "OpenMRSEKSNodeRole-nonprod"
    }

  # module.eks.aws_iam_role_policy_attachment.node_AmazonEKSWorkerNodePolicy will be created
  + resource "aws_iam_role_policy_attachment" "node_AmazonEKSWorkerNodePolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      + role       = "OpenMRSEKSNodeRole-nonprod"
    }

  # module.eks.aws_iam_role_policy_attachment.node_AmazonEKS_CNI_Policy will be created
  + resource "aws_iam_role_policy_attachment" "node_AmazonEKS_CNI_Policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      + role       = "OpenMRSEKSNodeRole-nonprod"
    }

  # module.eks.aws_security_group.cluster will be created
  + resource "aws_security_group" "cluster" {
      + arn                    = (known after apply)
      + description            = "Cluster communication with worker nodes"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = "openmrs-cluster-sg-nonprod"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name"  = "openmrs-cluster-sg-nonprod"
          + "owner" = "openmrs-infra"
        }
      + tags_all               = {
          + "Name"  = "openmrs-cluster-sg-nonprod"
          + "owner" = "openmrs-infra"
        }
      + vpc_id                 = (known after apply)
    }

  # module.eks.aws_security_group.node will be created
  + resource "aws_security_group" "node" {
      + arn                    = (known after apply)
      + description            = "Security group for all nodes in the EKS cluster"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = "openmrs-node-sg-nonprod"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name"  = "openmrs-node-sg-nonprod"
          + "owner" = "openmrs-infra"
        }
      + tags_all               = {
          + "Name"  = "openmrs-node-sg-nonprod"
          + "owner" = "openmrs-infra"
        }
      + vpc_id                 = (known after apply)
    }

  # module.vpc.aws_eip.nat_eip_az_a will be created
  + resource "aws_eip" "nat_eip_az_a" {
      + allocation_id        = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = "vpc"
      + id                   = (known after apply)
      + instance             = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags                 = {
          + "Name"  = "openmrs-nat-eip-az-a-nonprod"
          + "owner" = "openmrs-infra"
        }
      + tags_all             = {
          + "Name"  = "openmrs-nat-eip-az-a-nonprod"
          + "owner" = "openmrs-infra"
        }
      + vpc                  = (known after apply)
    }

  # module.vpc.aws_eip.nat_eip_az_b will be created
  + resource "aws_eip" "nat_eip_az_b" {
      + allocation_id        = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = "vpc"
      + id                   = (known after apply)
      + instance             = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags                 = {
          + "Name"  = "openmrs-nat-eip-az-b-nonprod"
          + "owner" = "openmrs-infra"
        }
      + tags_all             = {
          + "Name"  = "openmrs-nat-eip-az-b-nonprod"
          + "owner" = "openmrs-infra"
        }
      + vpc                  = (known after apply)
    }

  # module.vpc.aws_internet_gateway.igw will be created
  + resource "aws_internet_gateway" "igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name"  = "openmrs-igw-nonprod"
          + "owner" = "openmrs-infra"
        }
      + tags_all = {
          + "Name"  = "openmrs-igw-nonprod"
          + "owner" = "openmrs-infra"
        }
      + vpc_id   = (known after apply)
    }

  # module.vpc.aws_nat_gateway.nat_az_a will be created
  + resource "aws_nat_gateway" "nat_az_a" {
      + allocation_id        = (known after apply)
      + association_id       = (known after apply)
      + connectivity_type    = "public"
      + id                   = (known after apply)
      + network_interface_id = (known after apply)
      + private_ip           = (known after apply)
      + public_ip            = (known after apply)
      + subnet_id            = (known after apply)
      + tags                 = {
          + "Name"  = "openmrs-nat-gateway-az-a-nonprod"
          + "owner" = "openmrs-infra"
        }
      + tags_all             = {
          + "Name"  = "openmrs-nat-gateway-az-a-nonprod"
          + "owner" = "openmrs-infra"
        }
    }

  # module.vpc.aws_nat_gateway.nat_az_b will be created
  + resource "aws_nat_gateway" "nat_az_b" {
      + allocation_id        = (known after apply)
      + association_id       = (known after apply)
      + connectivity_type    = "public"
      + id                   = (known after apply)
      + network_interface_id = (known after apply)
      + private_ip           = (known after apply)
      + public_ip            = (known after apply)
      + subnet_id            = (known after apply)
      + tags                 = {
          + "Name"  = "openmrs-nat-gateway-az-b-nonprod"
          + "owner" = "openmrs-infra"
        }
      + tags_all             = {
          + "Name"  = "openmrs-nat-gateway-az-b-nonprod"
          + "owner" = "openmrs-infra"
        }
    }

  # module.vpc.aws_route_table.private_a will be created
  + resource "aws_route_table" "private_a" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + nat_gateway_id             = (known after apply)
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Name"  = "openmrs-rt-private-a-nonprod"
          + "owner" = "openmrs-infra"
        }
      + tags_all         = {
          + "Name"  = "openmrs-rt-private-a-nonprod"
          + "owner" = "openmrs-infra"
        }
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table.private_b will be created
  + resource "aws_route_table" "private_b" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + nat_gateway_id             = (known after apply)
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Name"  = "openmrs-rt-private-b-nonprod"
          + "owner" = "openmrs-infra"
        }
      + tags_all         = {
          + "Name"  = "openmrs-rt-private-b-nonprod"
          + "owner" = "openmrs-infra"
        }
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table.public will be created
  + resource "aws_route_table" "public" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + gateway_id                 = (known after apply)
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Name"  = "openmrs-rt-public-nonprod"
          + "owner" = "openmrs-infra"
        }
      + tags_all         = {
          + "Name"  = "openmrs-rt-public-nonprod"
          + "owner" = "openmrs-infra"
        }
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table_association.private_a will be created
  + resource "aws_route_table_association" "private_a" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.private_b will be created
  + resource "aws_route_table_association" "private_b" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.public_a will be created
  + resource "aws_route_table_association" "public_a" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.public_b will be created
  + resource "aws_route_table_association" "public_b" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_subnet.private_a will be created
  + resource "aws_subnet" "private_a" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-2a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name"                            = "openmrs-private-subnet-a-nonprod"
          + "Subnet-Type"                     = "private-nonprod"
          + "kubernetes.io/role/internal-elb" = "1"
          + "owner"                           = "openmrs-infra"
        }
      + tags_all                                       = {
          + "Name"                            = "openmrs-private-subnet-a-nonprod"
          + "Subnet-Type"                     = "private-nonprod"
          + "kubernetes.io/role/internal-elb" = "1"
          + "owner"                           = "openmrs-infra"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.private_b will be created
  + resource "aws_subnet" "private_b" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-2b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name"                            = "openmrs-private-subnet-b-nonprod"
          + "Subnet-Type"                     = "private-nonprod"
          + "kubernetes.io/role/internal-elb" = "1"
          + "owner"                           = "openmrs-infra"
        }
      + tags_all                                       = {
          + "Name"                            = "openmrs-private-subnet-b-nonprod"
          + "Subnet-Type"                     = "private-nonprod"
          + "kubernetes.io/role/internal-elb" = "1"
          + "owner"                           = "openmrs-infra"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.public_a will be created
  + resource "aws_subnet" "public_a" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-2a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.3.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name"                   = "openmrs-public-subnet-a-nonprod"
          + "Subnet-Type"            = "public-nonprod"
          + "kubernetes.io/role/elb" = "1"
          + "owner"                  = "openmrs-infra"
        }
      + tags_all                                       = {
          + "Name"                   = "openmrs-public-subnet-a-nonprod"
          + "Subnet-Type"            = "public-nonprod"
          + "kubernetes.io/role/elb" = "1"
          + "owner"                  = "openmrs-infra"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.public_b will be created
  + resource "aws_subnet" "public_b" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-2b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.4.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name"                   = "openmrs-public-subnet-b-nonprod"
          + "Subnet-Type"            = "public-nonprod"
          + "kubernetes.io/role/elb" = "1"
          + "owner"                  = "openmrs-infra"
        }
      + tags_all                                       = {
          + "Name"                   = "openmrs-public-subnet-b-nonprod"
          + "Subnet-Type"            = "public-nonprod"
          + "kubernetes.io/role/elb" = "1"
          + "owner"                  = "openmrs-infra"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_vpc.openmrs-vpc will be created
  + resource "aws_vpc" "openmrs-vpc" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name"  = "openmrs-vpc-nonprod"
          + "owner" = "openmrs-infra"
        }
      + tags_all                             = {
          + "Name"  = "openmrs-vpc-nonprod"
          + "owner" = "openmrs-infra"
        }
    }

Plan: 32 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + eks_cluster_name = "openmrs-cluster-nonprod"

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

module.vpc.aws_vpc.openmrs-vpc: Creating...
module.vpc.aws_vpc.openmrs-vpc: Still creating... [00m10s elapsed]
module.vpc.aws_vpc.openmrs-vpc: Creation complete after 19s [id=vpc-0fee8e4ebbdcf7035]
module.vpc.aws_internet_gateway.igw: Creating...
module.vpc.aws_subnet.public_b: Creating...
module.vpc.aws_subnet.private_a: Creating...
module.vpc.aws_subnet.public_a: Creating...
module.vpc.aws_subnet.private_b: Creating...
module.vpc.aws_internet_gateway.igw: Creation complete after 3s [id=igw-065632f8222138f60]
module.vpc.aws_eip.nat_eip_az_b: Creating...
module.vpc.aws_route_table.public: Creating...
module.vpc.aws_eip.nat_eip_az_a: Creating...
module.vpc.aws_subnet.private_a: Creation complete after 3s [id=subnet-0e01bafd724204a58]
module.vpc.aws_subnet.private_b: Creation complete after 3s [id=subnet-0d18ad99766dd2a61]
module.vpc.aws_eip.nat_eip_az_a: Creation complete after 1s [id=eipalloc-0b979942809bbbf85]
module.vpc.aws_eip.nat_eip_az_b: Creation complete after 1s [id=eipalloc-0592d9cbd1738d5e8]
module.vpc.aws_route_table.public: Creation complete after 3s [id=rtb-0d12c4448bad0bf62]
module.vpc.aws_subnet.public_b: Still creating... [00m10s elapsed]
module.vpc.aws_subnet.public_a: Still creating... [00m10s elapsed]
module.vpc.aws_subnet.public_b: Creation complete after 14s [id=subnet-0caee00c714522681]
module.vpc.aws_nat_gateway.nat_az_b: Creating...
module.vpc.aws_route_table_association.public_b: Creating...
module.vpc.aws_subnet.public_a: Creation complete after 14s [id=subnet-0baf8077210cf0fae]
module.vpc.aws_route_table_association.public_a: Creating...
module.vpc.aws_nat_gateway.nat_az_a: Creating...
module.vpc.aws_route_table_association.public_b: Creation complete after 1s [id=rtbassoc-04cd306195420c6e9]
module.vpc.aws_route_table_association.public_a: Creation complete after 2s [id=rtbassoc-05fe2d541a6182e02]
module.vpc.aws_nat_gateway.nat_az_b: Still creating... [00m10s elapsed]
module.vpc.aws_nat_gateway.nat_az_a: Still creating... [00m10s elapsed]
module.vpc.aws_nat_gateway.nat_az_b: Still creating... [00m20s elapsed]
module.vpc.aws_nat_gateway.nat_az_a: Still creating... [00m20s elapsed]
module.vpc.aws_nat_gateway.nat_az_b: Still creating... [00m30s elapsed]
module.vpc.aws_nat_gateway.nat_az_a: Still creating... [00m30s elapsed]
module.vpc.aws_nat_gateway.nat_az_b: Still creating... [00m40s elapsed]
module.vpc.aws_nat_gateway.nat_az_a: Still creating... [00m40s elapsed]
module.vpc.aws_nat_gateway.nat_az_b: Still creating... [00m50s elapsed]
module.vpc.aws_nat_gateway.nat_az_a: Still creating... [00m50s elapsed]
module.vpc.aws_nat_gateway.nat_az_b: Still creating... [01m00s elapsed]
module.vpc.aws_nat_gateway.nat_az_a: Still creating... [01m00s elapsed]
module.vpc.aws_nat_gateway.nat_az_b: Still creating... [01m10s elapsed]
module.vpc.aws_nat_gateway.nat_az_a: Still creating... [01m10s elapsed]
module.vpc.aws_nat_gateway.nat_az_b: Still creating... [01m20s elapsed]
module.vpc.aws_nat_gateway.nat_az_a: Still creating... [01m20s elapsed]
module.vpc.aws_nat_gateway.nat_az_b: Still creating... [01m30s elapsed]
module.vpc.aws_nat_gateway.nat_az_a: Still creating... [01m30s elapsed]
module.vpc.aws_nat_gateway.nat_az_b: Still creating... [01m40s elapsed]
module.vpc.aws_nat_gateway.nat_az_a: Still creating... [01m40s elapsed]
module.vpc.aws_nat_gateway.nat_az_a: Creation complete after 1m42s [id=nat-078e9b4727514286f]
module.vpc.aws_nat_gateway.nat_az_b: Still creating... [01m50s elapsed]
module.vpc.aws_route_table.private_a: Creating...
module.vpc.aws_route_table.private_a: Creation complete after 4s [id=rtb-01ffded0739b850d2]
module.vpc.aws_route_table_association.private_a: Creating...
module.vpc.aws_route_table_association.private_a: Creation complete after 2s [id=rtbassoc-001e67c4eae35f4d1]
module.vpc.aws_nat_gateway.nat_az_b: Still creating... [02m00s elapsed]
module.vpc.aws_nat_gateway.nat_az_b: Still creating... [02m10s elapsed]
module.vpc.aws_nat_gateway.nat_az_b: Creation complete after 2m13s [id=nat-0068f84a88386dafc]
module.vpc.aws_route_table.private_b: Creating...
module.vpc.aws_route_table.private_b: Creation complete after 4s [id=rtb-04a30ed67b5674527]
module.vpc.aws_route_table_association.private_b: Creating...
module.vpc.aws_route_table_association.private_b: Creation complete after 2s [id=rtbassoc-0917625938755aef9]
module.eks.aws_iam_role.node-role: Creating...
module.eks.aws_iam_role.cluster-role: Creating...
module.eks.data.aws_vpc.openmrs-vpc: Reading...
module.eks.data.aws_vpc.openmrs-vpc: Read complete after 2s [id=vpc-0fee8e4ebbdcf7035]
module.eks.data.aws_subnets.private_subnets: Reading...
module.eks.data.aws_subnets.public_subnets: Reading...
module.eks.aws_security_group.node: Creating...
module.eks.aws_security_group.cluster: Creating...
module.eks.data.aws_subnets.private_subnets: Read complete after 0s [id=us-east-2]
module.eks.data.aws_subnets.public_subnets: Read complete after 0s [id=us-east-2]
module.eks.aws_iam_role.cluster-role: Creation complete after 3s [id=OpenMRSEKSClusterRole-nonprod]
module.eks.aws_iam_role_policy_attachment.cluster_EKSClusterPolicy: Creating...
module.eks.aws_iam_role_policy_attachment.cluster_EKSServicePolicy: Creating...
module.eks.aws_iam_role.node-role: Creation complete after 3s [id=OpenMRSEKSNodeRole-nonprod]
module.eks.aws_iam_role_policy_attachment.node_AmazonEKS_CNI_Policy: Creating...
module.eks.aws_iam_role_policy_attachment.node_AmazonEKSWorkerNodePolicy: Creating...
module.eks.aws_iam_role_policy_attachment.node_AmazonEC2ContainerRegistryReadOnly: Creating...
module.eks.aws_iam_role_policy_attachment.cluster_EKSServicePolicy: Creation complete after 1s [id=OpenMRSEKSClusterRole-nonprod-20250805064154188600000003]
module.eks.aws_iam_role_policy_attachment.node_AmazonEKS_CNI_Policy: Creation complete after 1s [id=OpenMRSEKSNodeRole-nonprod-20250805064154674100000005]
module.eks.aws_iam_role_policy_attachment.cluster_EKSClusterPolicy: Creation complete after 1s [id=OpenMRSEKSClusterRole-nonprod-20250805064154202900000004]
module.eks.aws_iam_role_policy_attachment.node_AmazonEKSWorkerNodePolicy: Creation complete after 1s [id=OpenMRSEKSNodeRole-nonprod-20250805064154685100000006]
module.eks.aws_iam_role_policy_attachment.node_AmazonEC2ContainerRegistryReadOnly: Creation complete after 2s [id=OpenMRSEKSNodeRole-nonprod-20250805064155124600000007]
module.eks.aws_security_group.cluster: Creation complete after 5s [id=sg-0314989be45a668df]
module.eks.aws_security_group.node: Creation complete after 5s [id=sg-0261c39550c1c503d]
module.eks.aws_eks_cluster.openmrs-cluster: Creating...
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [00m10s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [00m20s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [00m30s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [00m40s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [00m50s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [01m00s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [01m10s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [01m20s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [01m30s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [01m40s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [01m50s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [02m00s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [02m10s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [02m20s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [02m30s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [02m40s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [02m50s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [03m00s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [03m10s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [03m20s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [03m30s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [03m40s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [03m50s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [04m00s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [04m10s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [04m20s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [04m30s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [04m40s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [04m50s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [05m00s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [05m10s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [05m20s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [05m30s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [05m40s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [05m50s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [06m00s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [06m10s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [06m20s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [06m30s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [06m40s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [06m50s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [07m00s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [07m10s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [07m20s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [07m30s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [07m40s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [07m50s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [08m00s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [08m10s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [08m20s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [08m30s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [08m40s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Still creating... [08m50s elapsed]
module.eks.aws_eks_cluster.openmrs-cluster: Creation complete after 8m57s [id=openmrs-cluster-nonprod]
module.eks.data.aws_eks_addon_version.openmrs-ebs-addon-version: Reading...
module.eks.data.tls_certificate.oidc: Reading...
module.eks.data.aws_eks_addon_version.openmrs-ebs-addon-version: Read complete after 0s [id=aws-ebs-csi-driver]
module.eks.data.tls_certificate.oidc: Read complete after 3s [id=0a759b1370f2328d0bd5dd3ac81215f4c3398ef8]
module.eks.aws_iam_openid_connect_provider.eks: Creating...
module.eks.aws_iam_openid_connect_provider.eks: Creation complete after 2s [id=arn:aws:iam::100074083541:oidc-provider/oidc.eks.us-east-2.amazonaws.com/id/19BBB2D541AD380D3526ED47FC97430A]
module.eks.data.aws_iam_policy_document.ebs_csi_driver_assume_role: Reading...
module.eks.data.aws_iam_policy_document.ebs_csi_driver_assume_role: Read complete after 0s [id=2384868509]
module.eks.aws_iam_role.ebs_csi_driver: Creating...
module.eks.aws_iam_role.ebs_csi_driver: Creation complete after 2s [id=ebs-csi-driver]
module.eks.aws_iam_role_policy_attachment.cluster_AmazonEBSCSIDriverPolicy: Creating...
module.eks.aws_eks_addon.openmrs-ebs-addon: Creating...
module.eks.aws_iam_role_policy_attachment.cluster_AmazonEBSCSIDriverPolicy: Creation complete after 0s [id=ebs-csi-driver-20250805065106995100000009]
module.eks.aws_eks_node_group.openmrs-node_group: Creating...
module.eks.aws_eks_addon.openmrs-ebs-addon: Still creating... [00m10s elapsed]
module.eks.aws_eks_node_group.openmrs-node_group: Still creating... [00m10s elapsed]
module.eks.aws_eks_addon.openmrs-ebs-addon: Still creating... [00m20s elapsed]
module.eks.aws_eks_node_group.openmrs-node_group: Still creating... [00m20s elapsed]
module.eks.aws_eks_addon.openmrs-ebs-addon: Still creating... [00m30s elapsed]
module.eks.aws_eks_node_group.openmrs-node_group: Still creating... [00m30s elapsed]
module.eks.aws_eks_addon.openmrs-ebs-addon: Still creating... [00m40s elapsed]
module.eks.aws_eks_node_group.openmrs-node_group: Still creating... [00m40s elapsed]
module.eks.aws_eks_addon.openmrs-ebs-addon: Still creating... [00m50s elapsed]
module.eks.aws_eks_node_group.openmrs-node_group: Still creating... [00m50s elapsed]
module.eks.aws_eks_addon.openmrs-ebs-addon: Still creating... [01m00s elapsed]
module.eks.aws_eks_node_group.openmrs-node_group: Still creating... [01m00s elapsed]
module.eks.aws_eks_addon.openmrs-ebs-addon: Still creating... [01m10s elapsed]
module.eks.aws_eks_node_group.openmrs-node_group: Still creating... [01m10s elapsed]
module.eks.aws_eks_addon.openmrs-ebs-addon: Still creating... [01m20s elapsed]
module.eks.aws_eks_node_group.openmrs-node_group: Still creating... [01m20s elapsed]
module.eks.aws_eks_node_group.openmrs-node_group: Creation complete after 1m22s [id=openmrs-cluster-nonprod:openmrs-node-group-nonprod]
module.eks.aws_eks_addon.openmrs-ebs-addon: Still creating... [01m30s elapsed]
module.eks.aws_eks_addon.openmrs-ebs-addon: Still creating... [01m40s elapsed]
module.eks.aws_eks_addon.openmrs-ebs-addon: Still creating... [01m50s elapsed]
module.eks.aws_eks_addon.openmrs-ebs-addon: Still creating... [02m00s elapsed]
module.eks.aws_eks_addon.openmrs-ebs-addon: Still creating... [02m10s elapsed]
module.eks.aws_eks_addon.openmrs-ebs-addon: Still creating... [02m20s elapsed]
module.eks.aws_eks_addon.openmrs-ebs-addon: Still creating... [02m30s elapsed]
module.eks.aws_eks_addon.openmrs-ebs-addon: Still creating... [02m40s elapsed]
module.eks.aws_eks_addon.openmrs-ebs-addon: Still creating... [02m50s elapsed]
module.eks.aws_eks_addon.openmrs-ebs-addon: Creation complete after 2m56s [id=openmrs-cluster-nonprod:aws-ebs-csi-driver]
Releasing state lock. This may take a few moments...

Apply complete! Resources: 32 added, 0 changed, 0 destroyed.

Outputs:

eks_cluster_name = "openmrs-cluster-nonprod"
(base) technicise-laptop-2@technicise-laptop-2-Vostro-3500:~/code/openmrs-contrib-cluster/terraform$ 

